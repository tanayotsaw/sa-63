import { hot } from 'react-hot-loader/root';
import React from 'react';
import ReactDOM from 'react-dom';
import BookmarkIcon from '@material-ui/icons/Bookmark';
import { createApiFactory, alertApiRef, AlertApiForwarder, errorApiRef, ErrorAlerter, ErrorApiForwarder, oauthRequestApiRef, OAuthRequestManager, discoveryApiRef, UrlPatternDiscovery, googleAuthApiRef, GoogleAuth, githubAuthApiRef, GithubAuth, gitlabAuthApiRef, GitlabAuth, auth0AuthApiRef, Auth0Auth, createApp, SidebarItem, Sidebar, SidebarSpacer, ApiTestRegistry, AlertDisplay, OAuthRequestDialog, SidebarPage } from '@backstage/core';
import SentimentDissatisfiedIcon from '@material-ui/icons/SentimentDissatisfied';

const alertApiFactory = createApiFactory({
  implements: alertApiRef,
  deps: {},
  factory: () => new AlertApiForwarder()
});
const errorApiFactory = createApiFactory({
  implements: errorApiRef,
  deps: {alertApi: alertApiRef},
  factory: ({alertApi}) => new ErrorAlerter(alertApi, new ErrorApiForwarder())
});
const oauthRequestApiFactory = createApiFactory({
  implements: oauthRequestApiRef,
  deps: {},
  factory: () => new OAuthRequestManager()
});
const discoveryApiFactory = createApiFactory({
  implements: discoveryApiRef,
  deps: {},
  factory: () => UrlPatternDiscovery.compile(`http://localhost:7000/{{ pluginId }}`)
});
const googleAuthApiFactory = createApiFactory({
  implements: googleAuthApiRef,
  deps: {discoveryApi: discoveryApiRef, oauthRequestApi: oauthRequestApiRef},
  factory: ({discoveryApi, oauthRequestApi}) => GoogleAuth.create({
    discoveryApi,
    oauthRequestApi
  })
});
const githubAuthApiFactory = createApiFactory({
  implements: githubAuthApiRef,
  deps: {discoveryApi: discoveryApiRef, oauthRequestApi: oauthRequestApiRef},
  factory: ({discoveryApi, oauthRequestApi}) => GithubAuth.create({
    discoveryApi,
    oauthRequestApi
  })
});
const gitlabAuthApiFactory = createApiFactory({
  implements: gitlabAuthApiRef,
  deps: {discoveryApi: discoveryApiRef, oauthRequestApi: oauthRequestApiRef},
  factory: ({discoveryApi, oauthRequestApi}) => GitlabAuth.create({
    discoveryApi,
    oauthRequestApi
  })
});
const auth0AuthApiFactory = createApiFactory({
  implements: auth0AuthApiRef,
  deps: {discoveryApi: discoveryApiRef, oauthRequestApi: oauthRequestApiRef},
  factory: ({discoveryApi, oauthRequestApi}) => Auth0Auth.create({
    discoveryApi,
    oauthRequestApi
  })
});

var defaultApiFactories = /*#__PURE__*/Object.freeze({
  __proto__: null,
  alertApiFactory: alertApiFactory,
  errorApiFactory: errorApiFactory,
  oauthRequestApiFactory: oauthRequestApiFactory,
  discoveryApiFactory: discoveryApiFactory,
  googleAuthApiFactory: googleAuthApiFactory,
  githubAuthApiFactory: githubAuthApiFactory,
  gitlabAuthApiFactory: gitlabAuthApiFactory,
  auth0AuthApiFactory: auth0AuthApiFactory
});

class DevAppBuilder {
  constructor() {
    this.plugins = new Array();
    this.factories = new Array();
    this.rootChildren = new Array();
  }
  registerPlugin(...plugins) {
    this.plugins.push(...plugins);
    return this;
  }
  registerApiFactory(factory) {
    this.factories.push(factory);
    return this;
  }
  addRootChild(node) {
    this.rootChildren.push(node);
    return this;
  }
  build() {
    const app = createApp({
      apis: this.setupApiRegistry(this.factories),
      plugins: this.plugins
    });
    const AppProvider = app.getProvider();
    const AppRouter = app.getRouter();
    const AppRoutes = app.getRoutes();
    const sidebar = this.setupSidebar(this.plugins);
    const DevApp = () => {
      return /* @__PURE__ */ React.createElement(AppProvider, null, /* @__PURE__ */ React.createElement(AlertDisplay, null), /* @__PURE__ */ React.createElement(OAuthRequestDialog, null), this.rootChildren, /* @__PURE__ */ React.createElement(AppRouter, null, /* @__PURE__ */ React.createElement(SidebarPage, null, sidebar, /* @__PURE__ */ React.createElement(AppRoutes, null))));
    };
    return DevApp;
  }
  render() {
    const DevApp = hot(this.build());
    const paths = this.findPluginPaths(this.plugins);
    if (window.location.pathname === "/") {
      if (!paths.includes("/") && paths.length > 0) {
        window.location.pathname = paths[0];
      }
    }
    ReactDOM.render(/* @__PURE__ */ React.createElement(DevApp, null), document.getElementById("root"));
  }
  setupSidebar(plugins) {
    var _a;
    const sidebarItems = new Array();
    for (const plugin of plugins) {
      for (const output of plugin.output()) {
        switch (output.type) {
          case "legacy-route": {
            const {path} = output;
            sidebarItems.push(/* @__PURE__ */ React.createElement(SidebarItem, {
              key: path,
              to: path,
              text: path,
              icon: BookmarkIcon
            }));
            break;
          }
          case "route": {
            const {target} = output;
            sidebarItems.push(/* @__PURE__ */ React.createElement(SidebarItem, {
              key: target.path,
              to: target.path,
              text: target.title,
              icon: (_a = target.icon) != null ? _a : SentimentDissatisfiedIcon
            }));
            break;
          }
        }
      }
    }
    return /* @__PURE__ */ React.createElement(Sidebar, null, /* @__PURE__ */ React.createElement(SidebarSpacer, null), sidebarItems);
  }
  setupApiRegistry(providedFactories) {
    const providedApis = new Set(providedFactories.map((factory) => factory.implements));
    const defaultFactories = Object.values(defaultApiFactories).filter((factory) => !providedApis.has(factory.implements));
    const allFactories = [...defaultFactories, ...providedFactories];
    const registry = new ApiTestRegistry();
    for (const factory of allFactories) {
      registry.register(factory);
    }
    return registry;
  }
  findPluginPaths(plugins) {
    const paths = new Array();
    for (const plugin of plugins) {
      for (const output of plugin.output()) {
        switch (output.type) {
          case "legacy-route": {
            paths.push(output.path);
            break;
          }
          case "route": {
            paths.push(output.target.path);
            break;
          }
        }
      }
    }
    return paths;
  }
}
function createDevApp() {
  return new DevAppBuilder();
}

export { createDevApp };
