'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Router = _interopDefault(require('express-promise-router'));
var express2 = _interopDefault(require('express'));
var axios2 = _interopDefault(require('axios'));

function getRequestHeaders(token) {
  return {
    headers: {
      Authorization: `Bearer ${token}`
    }
  };
}
function getSentryApiForwarder(token, logger) {
  return function fowardRequest(request, response) {
    const sentryUrl = request.path;
    const effectiveUrl = `https://sentry.io/${sentryUrl}`;
    logger.info(`Calling Sentry REST API, ${effectiveUrl}`);
    axios2.get(effectiveUrl, getRequestHeaders(token)).then((res) => {
      response.send(res.data);
    }).catch((err) => {
      return response.status(err.response.status).json({
        detail: err.response.statusText
      });
    });
  };
}

async function createRouter(logger) {
  const router = Router();
  router.use(express2.json());
  const SENTRY_TOKEN = process.env.SENTRY_TOKEN;
  if (!SENTRY_TOKEN) {
    if (process.env.NODE_ENV !== "development") {
      throw new Error("Sentry token must be provided in SENTRY_TOKEN environment variable to start the API.");
    }
    logger.warn("Failed to initialize Sentry backend, set SENTRY_TOKEN environment variable to start the API.");
  } else {
    const sentryForwarder = getSentryApiForwarder(SENTRY_TOKEN, logger);
    router.use(sentryForwarder);
  }
  return router;
}

exports.createRouter = createRouter;
