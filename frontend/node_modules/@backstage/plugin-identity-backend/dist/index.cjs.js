'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var express2 = _interopDefault(require('express'));
var Router = _interopDefault(require('express-promise-router'));

class StaticJsonAdapter {
  constructor(userGroups) {
    this.filterGroupsByType = (userGroups, type) => {
      const groups = type ? userGroups.filter((group) => group.type === type).map((group) => ({name: group.name, type: group.type})) : userGroups.map((group) => ({
        name: group.name,
        type: group.type
      }));
      return groups;
    };
    this.isUserInGroup = (group, user) => {
      if (group.members) {
        const groupMembers = group.members;
        const groupsWithUser = groupMembers.filter((member) => member.name === user);
        return Boolean(groupsWithUser.length);
      }
      return false;
    };
    this.groups = userGroups.groups;
  }
  getUserGroups(req) {
    return new Promise((resolve) => {
      const {user, type} = req;
      const userGroups = this._getUserGroups(this.groups, user);
      const groups = this.filterGroupsByType(userGroups, type);
      resolve({groups});
    });
  }
  _getUserGroups(groups, user) {
    const userGroups = new Set();
    groups.forEach((group) => {
      var _a;
      if (this.isUserInGroup(group, user)) {
        userGroups.add(group);
      }
      if (group.children) {
        const userSubGroups = (_a = this._getUserGroups(group.children, user)) != null ? _a : [];
        const isUserInSubGroup = Boolean(userSubGroups.length);
        if (isUserInSubGroup) {
          userGroups.add(group);
        }
        userSubGroups.forEach((subGroup) => userGroups.add(subGroup));
      }
    });
    return Array.from(userGroups);
  }
}

const userGroups = {
  groups: [
    {
      name: "engineering",
      type: "org",
      children: [
        {
          name: "authentication",
          type: "team",
          members: [{name: "kent"}, {name: "dobbs"}]
        },
        {
          name: "checkout",
          type: "team",
          members: [{name: "don"}, {name: "abramev"}]
        }
      ]
    }
  ]
};

const makeRouter = (adapter) => {
  const router = Router();
  router.use(express2.json());
  router.get("/users/:user/groups", async (req, res) => {
    var _a, _b;
    const user = req.params.user;
    const type = (_b = (_a = req.query.type) == null ? void 0 : _a.toString()) != null ? _b : "";
    const response = await adapter.getUserGroups({user, type});
    res.send(response);
  });
  return router;
};
async function createRouter(options) {
  const logger = options.logger;
  logger.info("Initializing identity API backend");
  const adapter = new StaticJsonAdapter(userGroups);
  return makeRouter(adapter);
}

exports.createRouter = createRouter;
