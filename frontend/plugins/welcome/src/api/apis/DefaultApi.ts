/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntLessonplan,
    EntLessonplanFromJSON,
    EntLessonplanToJSON,
    EntSection,
    EntSectionFromJSON,
    EntSectionToJSON,
    EntSubject,
    EntSubjectFromJSON,
    EntSubjectToJSON,
    EntTeacher,
    EntTeacherFromJSON,
    EntTeacherToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateLessonplanRequest {
    lessonplan: EntLessonplan;
}

export interface CreateSectionRequest {
    section: EntSection;
}

export interface CreateSubjectRequest {
    subject: EntSubject;
}

export interface CreateTeacherRequest {
    teacher: EntTeacher;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteLessonplanRequest {
    id: number;
}

export interface DeleteSectionRequest {
    id: number;
}

export interface DeleteSubjectRequest {
    id: number;
}

export interface DeleteTeacherRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetLessonplanRequest {
    id: number;
}

export interface GetSectionRequest {
    id: number;
}

export interface GetSubjectRequest {
    id: number;
}

export interface GetTeacherRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListLessonplanRequest {
    limit?: number;
    offset?: number;
}

export interface ListSectionRequest {
    limit?: number;
    offset?: number;
}

export interface ListSubjectRequest {
    limit?: number;
    offset?: number;
}

export interface ListTeacherRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateLessonplanRequest {
    id: number;
    lessonplan: EntLessonplan;
}

export interface UpdateSectionRequest {
    id: number;
    section: EntSection;
}

export interface UpdateSubjectRequest {
    id: number;
    subject: EntSubject;
}

export interface UpdateTeacherRequest {
    id: number;
    teacher: EntTeacher;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create lessonplan
     * Create lessonplan
     */
    async createLessonplanRaw(requestParameters: CreateLessonplanRequest): Promise<runtime.ApiResponse<EntLessonplan>> {
        if (requestParameters.lessonplan === null || requestParameters.lessonplan === undefined) {
            throw new runtime.RequiredError('lessonplan','Required parameter requestParameters.lessonplan was null or undefined when calling createLessonplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lessonplans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntLessonplanToJSON(requestParameters.lessonplan),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLessonplanFromJSON(jsonValue));
    }

    /**
     * Create lessonplan
     * Create lessonplan
     */
    async createLessonplan(requestParameters: CreateLessonplanRequest): Promise<EntLessonplan> {
        const response = await this.createLessonplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create section
     * Create section
     */
    async createSectionRaw(requestParameters: CreateSectionRequest): Promise<runtime.ApiResponse<EntSection>> {
        if (requestParameters.section === null || requestParameters.section === undefined) {
            throw new runtime.RequiredError('section','Required parameter requestParameters.section was null or undefined when calling createSection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSectionToJSON(requestParameters.section),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSectionFromJSON(jsonValue));
    }

    /**
     * Create section
     * Create section
     */
    async createSection(requestParameters: CreateSectionRequest): Promise<EntSection> {
        const response = await this.createSectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create subject
     * Create subject
     */
    async createSubjectRaw(requestParameters: CreateSubjectRequest): Promise<runtime.ApiResponse<EntSubject>> {
        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling createSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subjects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSubjectToJSON(requestParameters.subject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectFromJSON(jsonValue));
    }

    /**
     * Create subject
     * Create subject
     */
    async createSubject(requestParameters: CreateSubjectRequest): Promise<EntSubject> {
        const response = await this.createSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create teacher
     * Create teacher
     */
    async createTeacherRaw(requestParameters: CreateTeacherRequest): Promise<runtime.ApiResponse<EntTeacher>> {
        if (requestParameters.teacher === null || requestParameters.teacher === undefined) {
            throw new runtime.RequiredError('teacher','Required parameter requestParameters.teacher was null or undefined when calling createTeacher.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTeacherToJSON(requestParameters.teacher),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTeacherFromJSON(jsonValue));
    }

    /**
     * Create teacher
     * Create teacher
     */
    async createTeacher(requestParameters: CreateTeacherRequest): Promise<EntTeacher> {
        const response = await this.createTeacherRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get lessonplan by ID
     * Delete a lessonplan entity by ID
     */
    async deleteLessonplanRaw(requestParameters: DeleteLessonplanRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLessonplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lessonplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get lessonplan by ID
     * Delete a lessonplan entity by ID
     */
    async deleteLessonplan(requestParameters: DeleteLessonplanRequest): Promise<object> {
        const response = await this.deleteLessonplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get section by ID
     * Delete a section entity by ID
     */
    async deleteSectionRaw(requestParameters: DeleteSectionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get section by ID
     * Delete a section entity by ID
     */
    async deleteSection(requestParameters: DeleteSectionRequest): Promise<object> {
        const response = await this.deleteSectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get subject by ID
     * Delete a subject entity by ID
     */
    async deleteSubjectRaw(requestParameters: DeleteSubjectRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get subject by ID
     * Delete a subject entity by ID
     */
    async deleteSubject(requestParameters: DeleteSubjectRequest): Promise<object> {
        const response = await this.deleteSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * get teacher by ID
     * Delete a teacher entity by ID
     */
    async deleteTeacherRaw(requestParameters: DeleteTeacherRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTeacher.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get teacher by ID
     * Delete a teacher entity by ID
     */
    async deleteTeacher(requestParameters: DeleteTeacherRequest): Promise<object> {
        const response = await this.deleteTeacherRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get lessonplan by ID
     * Get a lessonplan entity by ID
     */
    async getLessonplanRaw(requestParameters: GetLessonplanRequest): Promise<runtime.ApiResponse<EntLessonplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLessonplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lessonplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLessonplanFromJSON(jsonValue));
    }

    /**
     * get lessonplan by ID
     * Get a lessonplan entity by ID
     */
    async getLessonplan(requestParameters: GetLessonplanRequest): Promise<EntLessonplan> {
        const response = await this.getLessonplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get section by ID
     * Get a section entity by ID
     */
    async getSectionRaw(requestParameters: GetSectionRequest): Promise<runtime.ApiResponse<EntSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSectionFromJSON(jsonValue));
    }

    /**
     * get section by ID
     * Get a section entity by ID
     */
    async getSection(requestParameters: GetSectionRequest): Promise<EntSection> {
        const response = await this.getSectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get subject by ID
     * Get a subject entity by ID
     */
    async getSubjectRaw(requestParameters: GetSubjectRequest): Promise<runtime.ApiResponse<EntSubject>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectFromJSON(jsonValue));
    }

    /**
     * get subject by ID
     * Get a subject entity by ID
     */
    async getSubject(requestParameters: GetSubjectRequest): Promise<EntSubject> {
        const response = await this.getSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * get teacher by ID
     * Get a teacher entity by ID
     */
    async getTeacherRaw(requestParameters: GetTeacherRequest): Promise<runtime.ApiResponse<EntTeacher>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTeacher.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTeacherFromJSON(jsonValue));
    }

    /**
     * get teacher by ID
     * Get a teacher entity by ID
     */
    async getTeacher(requestParameters: GetTeacherRequest): Promise<EntTeacher> {
        const response = await this.getTeacherRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list lessonplan entities
     * List lessonplan entities
     */
    async listLessonplanRaw(requestParameters: ListLessonplanRequest): Promise<runtime.ApiResponse<Array<EntLessonplan>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lessonplans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLessonplanFromJSON));
    }

    /**
     * list lessonplan entities
     * List lessonplan entities
     */
    async listLessonplan(requestParameters: ListLessonplanRequest): Promise<Array<EntLessonplan>> {
        const response = await this.listLessonplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * list section entities
     * List section entities
     */
    async listSectionRaw(requestParameters: ListSectionRequest): Promise<runtime.ApiResponse<Array<EntSection>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSectionFromJSON));
    }

    /**
     * list section entities
     * List section entities
     */
    async listSection(requestParameters: ListSectionRequest): Promise<Array<EntSection>> {
        const response = await this.listSectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list subject entities
     * List subject entities
     */
    async listSubjectRaw(requestParameters: ListSubjectRequest): Promise<runtime.ApiResponse<Array<EntSubject>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSubjectFromJSON));
    }

    /**
     * list subject entities
     * List subject entities
     */
    async listSubject(requestParameters: ListSubjectRequest): Promise<Array<EntSubject>> {
        const response = await this.listSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * list teacher entities
     * List teacher entities
     */
    async listTeacherRaw(requestParameters: ListTeacherRequest): Promise<runtime.ApiResponse<Array<EntTeacher>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTeacherFromJSON));
    }

    /**
     * list teacher entities
     * List teacher entities
     */
    async listTeacher(requestParameters: ListTeacherRequest): Promise<Array<EntTeacher>> {
        const response = await this.listTeacherRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update lessonplan by ID
     * Update a lessonplan entity by ID
     */
    async updateLessonplanRaw(requestParameters: UpdateLessonplanRequest): Promise<runtime.ApiResponse<EntLessonplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLessonplan.');
        }

        if (requestParameters.lessonplan === null || requestParameters.lessonplan === undefined) {
            throw new runtime.RequiredError('lessonplan','Required parameter requestParameters.lessonplan was null or undefined when calling updateLessonplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/lessonplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntLessonplanToJSON(requestParameters.lessonplan),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLessonplanFromJSON(jsonValue));
    }

    /**
     * update lessonplan by ID
     * Update a lessonplan entity by ID
     */
    async updateLessonplan(requestParameters: UpdateLessonplanRequest): Promise<EntLessonplan> {
        const response = await this.updateLessonplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * update section by ID
     * Update a section entity by ID
     */
    async updateSectionRaw(requestParameters: UpdateSectionRequest): Promise<runtime.ApiResponse<EntSection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSection.');
        }

        if (requestParameters.section === null || requestParameters.section === undefined) {
            throw new runtime.RequiredError('section','Required parameter requestParameters.section was null or undefined when calling updateSection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSectionToJSON(requestParameters.section),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSectionFromJSON(jsonValue));
    }

    /**
     * update section by ID
     * Update a section entity by ID
     */
    async updateSection(requestParameters: UpdateSectionRequest): Promise<EntSection> {
        const response = await this.updateSectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * update subject by ID
     * Update a subject entity by ID
     */
    async updateSubjectRaw(requestParameters: UpdateSubjectRequest): Promise<runtime.ApiResponse<EntSubject>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSubject.');
        }

        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling updateSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subjects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSubjectToJSON(requestParameters.subject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectFromJSON(jsonValue));
    }

    /**
     * update subject by ID
     * Update a subject entity by ID
     */
    async updateSubject(requestParameters: UpdateSubjectRequest): Promise<EntSubject> {
        const response = await this.updateSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * update teacher by ID
     * Update a teacher entity by ID
     */
    async updateTeacherRaw(requestParameters: UpdateTeacherRequest): Promise<runtime.ApiResponse<EntTeacher>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTeacher.');
        }

        if (requestParameters.teacher === null || requestParameters.teacher === undefined) {
            throw new runtime.RequiredError('teacher','Required parameter requestParameters.teacher was null or undefined when calling updateTeacher.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTeacherToJSON(requestParameters.teacher),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTeacherFromJSON(jsonValue));
    }

    /**
     * update teacher by ID
     * Update a teacher entity by ID
     */
    async updateTeacher(requestParameters: UpdateTeacherRequest): Promise<EntTeacher> {
        const response = await this.updateTeacherRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
