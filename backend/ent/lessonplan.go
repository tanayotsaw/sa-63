// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/USER/app/ent/lessonplan"
	"github.com/USER/app/ent/section"
	"github.com/USER/app/ent/subject"
	"github.com/USER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Lessonplan is the model entity for the Lessonplan schema.
type Lessonplan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Room holds the value of the "Room" field.
	Room string `json:"Room,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonplanQuery when eager-loading is set.
	Edges               LessonplanEdges `json:"edges"`
	section_sec_id      *int
	subject_subject_id  *int
	teacher_teachers_id *int
}

// LessonplanEdges holds the relations/edges for other nodes in the graph.
type LessonplanEdges struct {
	// GroupID holds the value of the Group_id edge.
	GroupID *Section
	// CourseID holds the value of the Course_ID edge.
	CourseID *Subject
	// ProfessorID holds the value of the Professor_ID edge.
	ProfessorID *Teacher
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GroupIDOrErr returns the GroupID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonplanEdges) GroupIDOrErr() (*Section, error) {
	if e.loadedTypes[0] {
		if e.GroupID == nil {
			// The edge Group_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: section.Label}
		}
		return e.GroupID, nil
	}
	return nil, &NotLoadedError{edge: "Group_id"}
}

// CourseIDOrErr returns the CourseID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonplanEdges) CourseIDOrErr() (*Subject, error) {
	if e.loadedTypes[1] {
		if e.CourseID == nil {
			// The edge Course_ID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subject.Label}
		}
		return e.CourseID, nil
	}
	return nil, &NotLoadedError{edge: "Course_ID"}
}

// ProfessorIDOrErr returns the ProfessorID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonplanEdges) ProfessorIDOrErr() (*Teacher, error) {
	if e.loadedTypes[2] {
		if e.ProfessorID == nil {
			// The edge Professor_ID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.ProfessorID, nil
	}
	return nil, &NotLoadedError{edge: "Professor_ID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lessonplan) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Room
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Lessonplan) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // section_sec_id
		&sql.NullInt64{}, // subject_subject_id
		&sql.NullInt64{}, // teacher_teachers_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lessonplan fields.
func (l *Lessonplan) assignValues(values ...interface{}) error {
	if m, n := len(values), len(lessonplan.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	l.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Room", values[0])
	} else if value.Valid {
		l.Room = value.String
	}
	values = values[1:]
	if len(values) == len(lessonplan.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field section_sec_id", value)
		} else if value.Valid {
			l.section_sec_id = new(int)
			*l.section_sec_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field subject_subject_id", value)
		} else if value.Valid {
			l.subject_subject_id = new(int)
			*l.subject_subject_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field teacher_teachers_id", value)
		} else if value.Valid {
			l.teacher_teachers_id = new(int)
			*l.teacher_teachers_id = int(value.Int64)
		}
	}
	return nil
}

// QueryGroupID queries the Group_id edge of the Lessonplan.
func (l *Lessonplan) QueryGroupID() *SectionQuery {
	return (&LessonplanClient{config: l.config}).QueryGroupID(l)
}

// QueryCourseID queries the Course_ID edge of the Lessonplan.
func (l *Lessonplan) QueryCourseID() *SubjectQuery {
	return (&LessonplanClient{config: l.config}).QueryCourseID(l)
}

// QueryProfessorID queries the Professor_ID edge of the Lessonplan.
func (l *Lessonplan) QueryProfessorID() *TeacherQuery {
	return (&LessonplanClient{config: l.config}).QueryProfessorID(l)
}

// Update returns a builder for updating this Lessonplan.
// Note that, you need to call Lessonplan.Unwrap() before calling this method, if this Lessonplan
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lessonplan) Update() *LessonplanUpdateOne {
	return (&LessonplanClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (l *Lessonplan) Unwrap() *Lessonplan {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lessonplan is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lessonplan) String() string {
	var builder strings.Builder
	builder.WriteString("Lessonplan(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", Room=")
	builder.WriteString(l.Room)
	builder.WriteByte(')')
	return builder.String()
}

// Lessonplans is a parsable slice of Lessonplan.
type Lessonplans []*Lessonplan

func (l Lessonplans) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
