// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/USER/app/ent/lessonplan"
	"github.com/USER/app/ent/section"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SectionCreate is the builder for creating a Section entity.
type SectionCreate struct {
	config
	mutation *SectionMutation
	hooks    []Hook
}

// SetGroup sets the Group field.
func (sc *SectionCreate) SetGroup(i int) *SectionCreate {
	sc.mutation.SetGroup(i)
	return sc
}

// SetRecieve sets the recieve field.
func (sc *SectionCreate) SetRecieve(i int) *SectionCreate {
	sc.mutation.SetRecieve(i)
	return sc
}

// SetSeatLeft sets the Seat_left field.
func (sc *SectionCreate) SetSeatLeft(i int) *SectionCreate {
	sc.mutation.SetSeatLeft(i)
	return sc
}

// SetRoom sets the Room field.
func (sc *SectionCreate) SetRoom(s string) *SectionCreate {
	sc.mutation.SetRoom(s)
	return sc
}

// SetDateTime sets the Date_Time field.
func (sc *SectionCreate) SetDateTime(s string) *SectionCreate {
	sc.mutation.SetDateTime(s)
	return sc
}

// AddSecIDIDs adds the sec_id edge to Lessonplan by ids.
func (sc *SectionCreate) AddSecIDIDs(ids ...int) *SectionCreate {
	sc.mutation.AddSecIDIDs(ids...)
	return sc
}

// AddSecID adds the sec_id edges to Lessonplan.
func (sc *SectionCreate) AddSecID(l ...*Lessonplan) *SectionCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return sc.AddSecIDIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (sc *SectionCreate) Mutation() *SectionMutation {
	return sc.mutation
}

// Save creates the Section in the database.
func (sc *SectionCreate) Save(ctx context.Context) (*Section, error) {
	if _, ok := sc.mutation.Group(); !ok {
		return nil, &ValidationError{Name: "Group", err: errors.New("ent: missing required field \"Group\"")}
	}
	if v, ok := sc.mutation.Group(); ok {
		if err := section.GroupValidator(v); err != nil {
			return nil, &ValidationError{Name: "Group", err: fmt.Errorf("ent: validator failed for field \"Group\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Recieve(); !ok {
		return nil, &ValidationError{Name: "recieve", err: errors.New("ent: missing required field \"recieve\"")}
	}
	if v, ok := sc.mutation.Recieve(); ok {
		if err := section.RecieveValidator(v); err != nil {
			return nil, &ValidationError{Name: "recieve", err: fmt.Errorf("ent: validator failed for field \"recieve\": %w", err)}
		}
	}
	if _, ok := sc.mutation.SeatLeft(); !ok {
		return nil, &ValidationError{Name: "Seat_left", err: errors.New("ent: missing required field \"Seat_left\"")}
	}
	if v, ok := sc.mutation.SeatLeft(); ok {
		if err := section.SeatLeftValidator(v); err != nil {
			return nil, &ValidationError{Name: "Seat_left", err: fmt.Errorf("ent: validator failed for field \"Seat_left\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Room(); !ok {
		return nil, &ValidationError{Name: "Room", err: errors.New("ent: missing required field \"Room\"")}
	}
	if v, ok := sc.mutation.Room(); ok {
		if err := section.RoomValidator(v); err != nil {
			return nil, &ValidationError{Name: "Room", err: fmt.Errorf("ent: validator failed for field \"Room\": %w", err)}
		}
	}
	if _, ok := sc.mutation.DateTime(); !ok {
		return nil, &ValidationError{Name: "Date_Time", err: errors.New("ent: missing required field \"Date_Time\"")}
	}
	if v, ok := sc.mutation.DateTime(); ok {
		if err := section.DateTimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "Date_Time", err: fmt.Errorf("ent: validator failed for field \"Date_Time\": %w", err)}
		}
	}
	var (
		err  error
		node *Section
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SectionCreate) SaveX(ctx context.Context) *Section {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SectionCreate) sqlSave(ctx context.Context) (*Section, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SectionCreate) createSpec() (*Section, *sqlgraph.CreateSpec) {
	var (
		s     = &Section{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: section.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: section.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Group(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldGroup,
		})
		s.Group = value
	}
	if value, ok := sc.mutation.Recieve(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldRecieve,
		})
		s.Recieve = value
	}
	if value, ok := sc.mutation.SeatLeft(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldSeatLeft,
		})
		s.SeatLeft = value
	}
	if value, ok := sc.mutation.Room(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldRoom,
		})
		s.Room = value
	}
	if value, ok := sc.mutation.DateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldDateTime,
		})
		s.DateTime = value
	}
	if nodes := sc.mutation.SecIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.SecIDTable,
			Columns: []string{section.SecIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lessonplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
