// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/USER/app/ent/lessonplan"
	"github.com/USER/app/ent/predicate"
	"github.com/USER/app/ent/section"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// SectionUpdate is the builder for updating Section entities.
type SectionUpdate struct {
	config
	hooks      []Hook
	mutation   *SectionMutation
	predicates []predicate.Section
}

// Where adds a new predicate for the builder.
func (su *SectionUpdate) Where(ps ...predicate.Section) *SectionUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetGroup sets the Group field.
func (su *SectionUpdate) SetGroup(i int) *SectionUpdate {
	su.mutation.ResetGroup()
	su.mutation.SetGroup(i)
	return su
}

// AddGroup adds i to Group.
func (su *SectionUpdate) AddGroup(i int) *SectionUpdate {
	su.mutation.AddGroup(i)
	return su
}

// SetRecieve sets the recieve field.
func (su *SectionUpdate) SetRecieve(i int) *SectionUpdate {
	su.mutation.ResetRecieve()
	su.mutation.SetRecieve(i)
	return su
}

// AddRecieve adds i to recieve.
func (su *SectionUpdate) AddRecieve(i int) *SectionUpdate {
	su.mutation.AddRecieve(i)
	return su
}

// SetSeatLeft sets the Seat_left field.
func (su *SectionUpdate) SetSeatLeft(i int) *SectionUpdate {
	su.mutation.ResetSeatLeft()
	su.mutation.SetSeatLeft(i)
	return su
}

// AddSeatLeft adds i to Seat_left.
func (su *SectionUpdate) AddSeatLeft(i int) *SectionUpdate {
	su.mutation.AddSeatLeft(i)
	return su
}

// SetRoom sets the Room field.
func (su *SectionUpdate) SetRoom(s string) *SectionUpdate {
	su.mutation.SetRoom(s)
	return su
}

// SetDateTime sets the Date_Time field.
func (su *SectionUpdate) SetDateTime(s string) *SectionUpdate {
	su.mutation.SetDateTime(s)
	return su
}

// AddSecIDIDs adds the sec_id edge to Lessonplan by ids.
func (su *SectionUpdate) AddSecIDIDs(ids ...int) *SectionUpdate {
	su.mutation.AddSecIDIDs(ids...)
	return su
}

// AddSecID adds the sec_id edges to Lessonplan.
func (su *SectionUpdate) AddSecID(l ...*Lessonplan) *SectionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return su.AddSecIDIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (su *SectionUpdate) Mutation() *SectionMutation {
	return su.mutation
}

// RemoveSecIDIDs removes the sec_id edge to Lessonplan by ids.
func (su *SectionUpdate) RemoveSecIDIDs(ids ...int) *SectionUpdate {
	su.mutation.RemoveSecIDIDs(ids...)
	return su
}

// RemoveSecID removes sec_id edges to Lessonplan.
func (su *SectionUpdate) RemoveSecID(l ...*Lessonplan) *SectionUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return su.RemoveSecIDIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SectionUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Group(); ok {
		if err := section.GroupValidator(v); err != nil {
			return 0, &ValidationError{Name: "Group", err: fmt.Errorf("ent: validator failed for field \"Group\": %w", err)}
		}
	}
	if v, ok := su.mutation.Recieve(); ok {
		if err := section.RecieveValidator(v); err != nil {
			return 0, &ValidationError{Name: "recieve", err: fmt.Errorf("ent: validator failed for field \"recieve\": %w", err)}
		}
	}
	if v, ok := su.mutation.SeatLeft(); ok {
		if err := section.SeatLeftValidator(v); err != nil {
			return 0, &ValidationError{Name: "Seat_left", err: fmt.Errorf("ent: validator failed for field \"Seat_left\": %w", err)}
		}
	}
	if v, ok := su.mutation.Room(); ok {
		if err := section.RoomValidator(v); err != nil {
			return 0, &ValidationError{Name: "Room", err: fmt.Errorf("ent: validator failed for field \"Room\": %w", err)}
		}
	}
	if v, ok := su.mutation.DateTime(); ok {
		if err := section.DateTimeValidator(v); err != nil {
			return 0, &ValidationError{Name: "Date_Time", err: fmt.Errorf("ent: validator failed for field \"Date_Time\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SectionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SectionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SectionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   section.Table,
			Columns: section.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: section.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Group(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldGroup,
		})
	}
	if value, ok := su.mutation.AddedGroup(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldGroup,
		})
	}
	if value, ok := su.mutation.Recieve(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldRecieve,
		})
	}
	if value, ok := su.mutation.AddedRecieve(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldRecieve,
		})
	}
	if value, ok := su.mutation.SeatLeft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldSeatLeft,
		})
	}
	if value, ok := su.mutation.AddedSeatLeft(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldSeatLeft,
		})
	}
	if value, ok := su.mutation.Room(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldRoom,
		})
	}
	if value, ok := su.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldDateTime,
		})
	}
	if nodes := su.mutation.RemovedSecIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.SecIDTable,
			Columns: []string{section.SecIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lessonplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SecIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.SecIDTable,
			Columns: []string{section.SecIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lessonplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SectionUpdateOne is the builder for updating a single Section entity.
type SectionUpdateOne struct {
	config
	hooks    []Hook
	mutation *SectionMutation
}

// SetGroup sets the Group field.
func (suo *SectionUpdateOne) SetGroup(i int) *SectionUpdateOne {
	suo.mutation.ResetGroup()
	suo.mutation.SetGroup(i)
	return suo
}

// AddGroup adds i to Group.
func (suo *SectionUpdateOne) AddGroup(i int) *SectionUpdateOne {
	suo.mutation.AddGroup(i)
	return suo
}

// SetRecieve sets the recieve field.
func (suo *SectionUpdateOne) SetRecieve(i int) *SectionUpdateOne {
	suo.mutation.ResetRecieve()
	suo.mutation.SetRecieve(i)
	return suo
}

// AddRecieve adds i to recieve.
func (suo *SectionUpdateOne) AddRecieve(i int) *SectionUpdateOne {
	suo.mutation.AddRecieve(i)
	return suo
}

// SetSeatLeft sets the Seat_left field.
func (suo *SectionUpdateOne) SetSeatLeft(i int) *SectionUpdateOne {
	suo.mutation.ResetSeatLeft()
	suo.mutation.SetSeatLeft(i)
	return suo
}

// AddSeatLeft adds i to Seat_left.
func (suo *SectionUpdateOne) AddSeatLeft(i int) *SectionUpdateOne {
	suo.mutation.AddSeatLeft(i)
	return suo
}

// SetRoom sets the Room field.
func (suo *SectionUpdateOne) SetRoom(s string) *SectionUpdateOne {
	suo.mutation.SetRoom(s)
	return suo
}

// SetDateTime sets the Date_Time field.
func (suo *SectionUpdateOne) SetDateTime(s string) *SectionUpdateOne {
	suo.mutation.SetDateTime(s)
	return suo
}

// AddSecIDIDs adds the sec_id edge to Lessonplan by ids.
func (suo *SectionUpdateOne) AddSecIDIDs(ids ...int) *SectionUpdateOne {
	suo.mutation.AddSecIDIDs(ids...)
	return suo
}

// AddSecID adds the sec_id edges to Lessonplan.
func (suo *SectionUpdateOne) AddSecID(l ...*Lessonplan) *SectionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suo.AddSecIDIDs(ids...)
}

// Mutation returns the SectionMutation object of the builder.
func (suo *SectionUpdateOne) Mutation() *SectionMutation {
	return suo.mutation
}

// RemoveSecIDIDs removes the sec_id edge to Lessonplan by ids.
func (suo *SectionUpdateOne) RemoveSecIDIDs(ids ...int) *SectionUpdateOne {
	suo.mutation.RemoveSecIDIDs(ids...)
	return suo
}

// RemoveSecID removes sec_id edges to Lessonplan.
func (suo *SectionUpdateOne) RemoveSecID(l ...*Lessonplan) *SectionUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return suo.RemoveSecIDIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SectionUpdateOne) Save(ctx context.Context) (*Section, error) {
	if v, ok := suo.mutation.Group(); ok {
		if err := section.GroupValidator(v); err != nil {
			return nil, &ValidationError{Name: "Group", err: fmt.Errorf("ent: validator failed for field \"Group\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Recieve(); ok {
		if err := section.RecieveValidator(v); err != nil {
			return nil, &ValidationError{Name: "recieve", err: fmt.Errorf("ent: validator failed for field \"recieve\": %w", err)}
		}
	}
	if v, ok := suo.mutation.SeatLeft(); ok {
		if err := section.SeatLeftValidator(v); err != nil {
			return nil, &ValidationError{Name: "Seat_left", err: fmt.Errorf("ent: validator failed for field \"Seat_left\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Room(); ok {
		if err := section.RoomValidator(v); err != nil {
			return nil, &ValidationError{Name: "Room", err: fmt.Errorf("ent: validator failed for field \"Room\": %w", err)}
		}
	}
	if v, ok := suo.mutation.DateTime(); ok {
		if err := section.DateTimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "Date_Time", err: fmt.Errorf("ent: validator failed for field \"Date_Time\": %w", err)}
		}
	}

	var (
		err  error
		node *Section
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SectionUpdateOne) SaveX(ctx context.Context) *Section {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SectionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SectionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SectionUpdateOne) sqlSave(ctx context.Context) (s *Section, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   section.Table,
			Columns: section.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: section.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Section.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Group(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldGroup,
		})
	}
	if value, ok := suo.mutation.AddedGroup(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldGroup,
		})
	}
	if value, ok := suo.mutation.Recieve(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldRecieve,
		})
	}
	if value, ok := suo.mutation.AddedRecieve(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldRecieve,
		})
	}
	if value, ok := suo.mutation.SeatLeft(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldSeatLeft,
		})
	}
	if value, ok := suo.mutation.AddedSeatLeft(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: section.FieldSeatLeft,
		})
	}
	if value, ok := suo.mutation.Room(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldRoom,
		})
	}
	if value, ok := suo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: section.FieldDateTime,
		})
	}
	if nodes := suo.mutation.RemovedSecIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.SecIDTable,
			Columns: []string{section.SecIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lessonplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SecIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   section.SecIDTable,
			Columns: []string{section.SecIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lessonplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Section{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{section.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
