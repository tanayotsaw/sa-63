// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/USER/app/ent/lessonplan"
	"github.com/USER/app/ent/section"
	"github.com/USER/app/ent/subject"
	"github.com/USER/app/ent/teacher"
	"github.com/USER/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLessonplan = "Lessonplan"
	TypeSection    = "Section"
	TypeSubject    = "Subject"
	TypeTeacher    = "Teacher"
	TypeUser       = "User"
)

// LessonplanMutation represents an operation that mutate the Lessonplans
// nodes in the graph.
type LessonplanMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Room                *string
	clearedFields        map[string]struct{}
	_Group_id            *int
	cleared_Group_id     bool
	_Course_ID           *int
	cleared_Course_ID    bool
	_Professor_ID        *int
	cleared_Professor_ID bool
	done                 bool
	oldValue             func(context.Context) (*Lessonplan, error)
}

var _ ent.Mutation = (*LessonplanMutation)(nil)

// lessonplanOption allows to manage the mutation configuration using functional options.
type lessonplanOption func(*LessonplanMutation)

// newLessonplanMutation creates new mutation for $n.Name.
func newLessonplanMutation(c config, op Op, opts ...lessonplanOption) *LessonplanMutation {
	m := &LessonplanMutation{
		config:        c,
		op:            op,
		typ:           TypeLessonplan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLessonplanID sets the id field of the mutation.
func withLessonplanID(id int) lessonplanOption {
	return func(m *LessonplanMutation) {
		var (
			err   error
			once  sync.Once
			value *Lessonplan
		)
		m.oldValue = func(ctx context.Context) (*Lessonplan, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lessonplan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLessonplan sets the old Lessonplan of the mutation.
func withLessonplan(node *Lessonplan) lessonplanOption {
	return func(m *LessonplanMutation) {
		m.oldValue = func(context.Context) (*Lessonplan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LessonplanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LessonplanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *LessonplanMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoom sets the Room field.
func (m *LessonplanMutation) SetRoom(s string) {
	m._Room = &s
}

// Room returns the Room value in the mutation.
func (m *LessonplanMutation) Room() (r string, exists bool) {
	v := m._Room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoom returns the old Room value of the Lessonplan.
// If the Lessonplan object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *LessonplanMutation) OldRoom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoom is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoom: %w", err)
	}
	return oldValue.Room, nil
}

// ResetRoom reset all changes of the "Room" field.
func (m *LessonplanMutation) ResetRoom() {
	m._Room = nil
}

// SetGroupIDID sets the Group_id edge to Section by id.
func (m *LessonplanMutation) SetGroupIDID(id int) {
	m._Group_id = &id
}

// ClearGroupID clears the Group_id edge to Section.
func (m *LessonplanMutation) ClearGroupID() {
	m.cleared_Group_id = true
}

// GroupIDCleared returns if the edge Group_id was cleared.
func (m *LessonplanMutation) GroupIDCleared() bool {
	return m.cleared_Group_id
}

// GroupIDID returns the Group_id id in the mutation.
func (m *LessonplanMutation) GroupIDID() (id int, exists bool) {
	if m._Group_id != nil {
		return *m._Group_id, true
	}
	return
}

// GroupIDIDs returns the Group_id ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GroupIDID instead. It exists only for internal usage by the builders.
func (m *LessonplanMutation) GroupIDIDs() (ids []int) {
	if id := m._Group_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroupID reset all changes of the "Group_id" edge.
func (m *LessonplanMutation) ResetGroupID() {
	m._Group_id = nil
	m.cleared_Group_id = false
}

// SetCourseIDID sets the Course_ID edge to Subject by id.
func (m *LessonplanMutation) SetCourseIDID(id int) {
	m._Course_ID = &id
}

// ClearCourseID clears the Course_ID edge to Subject.
func (m *LessonplanMutation) ClearCourseID() {
	m.cleared_Course_ID = true
}

// CourseIDCleared returns if the edge Course_ID was cleared.
func (m *LessonplanMutation) CourseIDCleared() bool {
	return m.cleared_Course_ID
}

// CourseIDID returns the Course_ID id in the mutation.
func (m *LessonplanMutation) CourseIDID() (id int, exists bool) {
	if m._Course_ID != nil {
		return *m._Course_ID, true
	}
	return
}

// CourseIDIDs returns the Course_ID ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CourseIDID instead. It exists only for internal usage by the builders.
func (m *LessonplanMutation) CourseIDIDs() (ids []int) {
	if id := m._Course_ID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCourseID reset all changes of the "Course_ID" edge.
func (m *LessonplanMutation) ResetCourseID() {
	m._Course_ID = nil
	m.cleared_Course_ID = false
}

// SetProfessorIDID sets the Professor_ID edge to Teacher by id.
func (m *LessonplanMutation) SetProfessorIDID(id int) {
	m._Professor_ID = &id
}

// ClearProfessorID clears the Professor_ID edge to Teacher.
func (m *LessonplanMutation) ClearProfessorID() {
	m.cleared_Professor_ID = true
}

// ProfessorIDCleared returns if the edge Professor_ID was cleared.
func (m *LessonplanMutation) ProfessorIDCleared() bool {
	return m.cleared_Professor_ID
}

// ProfessorIDID returns the Professor_ID id in the mutation.
func (m *LessonplanMutation) ProfessorIDID() (id int, exists bool) {
	if m._Professor_ID != nil {
		return *m._Professor_ID, true
	}
	return
}

// ProfessorIDIDs returns the Professor_ID ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProfessorIDID instead. It exists only for internal usage by the builders.
func (m *LessonplanMutation) ProfessorIDIDs() (ids []int) {
	if id := m._Professor_ID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfessorID reset all changes of the "Professor_ID" edge.
func (m *LessonplanMutation) ResetProfessorID() {
	m._Professor_ID = nil
	m.cleared_Professor_ID = false
}

// Op returns the operation name.
func (m *LessonplanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Lessonplan).
func (m *LessonplanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *LessonplanMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Room != nil {
		fields = append(fields, lessonplan.FieldRoom)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *LessonplanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lessonplan.FieldRoom:
		return m.Room()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *LessonplanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lessonplan.FieldRoom:
		return m.OldRoom(ctx)
	}
	return nil, fmt.Errorf("unknown Lessonplan field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LessonplanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lessonplan.FieldRoom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoom(v)
		return nil
	}
	return fmt.Errorf("unknown Lessonplan field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *LessonplanMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *LessonplanMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LessonplanMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lessonplan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *LessonplanMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *LessonplanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *LessonplanMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Lessonplan nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *LessonplanMutation) ResetField(name string) error {
	switch name {
	case lessonplan.FieldRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Lessonplan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *LessonplanMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Group_id != nil {
		edges = append(edges, lessonplan.EdgeGroupID)
	}
	if m._Course_ID != nil {
		edges = append(edges, lessonplan.EdgeCourseID)
	}
	if m._Professor_ID != nil {
		edges = append(edges, lessonplan.EdgeProfessorID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *LessonplanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lessonplan.EdgeGroupID:
		if id := m._Group_id; id != nil {
			return []ent.Value{*id}
		}
	case lessonplan.EdgeCourseID:
		if id := m._Course_ID; id != nil {
			return []ent.Value{*id}
		}
	case lessonplan.EdgeProfessorID:
		if id := m._Professor_ID; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *LessonplanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *LessonplanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *LessonplanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Group_id {
		edges = append(edges, lessonplan.EdgeGroupID)
	}
	if m.cleared_Course_ID {
		edges = append(edges, lessonplan.EdgeCourseID)
	}
	if m.cleared_Professor_ID {
		edges = append(edges, lessonplan.EdgeProfessorID)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *LessonplanMutation) EdgeCleared(name string) bool {
	switch name {
	case lessonplan.EdgeGroupID:
		return m.cleared_Group_id
	case lessonplan.EdgeCourseID:
		return m.cleared_Course_ID
	case lessonplan.EdgeProfessorID:
		return m.cleared_Professor_ID
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *LessonplanMutation) ClearEdge(name string) error {
	switch name {
	case lessonplan.EdgeGroupID:
		m.ClearGroupID()
		return nil
	case lessonplan.EdgeCourseID:
		m.ClearCourseID()
		return nil
	case lessonplan.EdgeProfessorID:
		m.ClearProfessorID()
		return nil
	}
	return fmt.Errorf("unknown Lessonplan unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *LessonplanMutation) ResetEdge(name string) error {
	switch name {
	case lessonplan.EdgeGroupID:
		m.ResetGroupID()
		return nil
	case lessonplan.EdgeCourseID:
		m.ResetCourseID()
		return nil
	case lessonplan.EdgeProfessorID:
		m.ResetProfessorID()
		return nil
	}
	return fmt.Errorf("unknown Lessonplan edge %s", name)
}

// SectionMutation represents an operation that mutate the Sections
// nodes in the graph.
type SectionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Group        *int
	add_Group     *int
	recieve       *int
	addrecieve    *int
	_Seat_left    *int
	add_Seat_left *int
	_Room         *string
	_Date_Time    *string
	clearedFields map[string]struct{}
	sec_id        map[int]struct{}
	removedsec_id map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Section, error)
}

var _ ent.Mutation = (*SectionMutation)(nil)

// sectionOption allows to manage the mutation configuration using functional options.
type sectionOption func(*SectionMutation)

// newSectionMutation creates new mutation for $n.Name.
func newSectionMutation(c config, op Op, opts ...sectionOption) *SectionMutation {
	m := &SectionMutation{
		config:        c,
		op:            op,
		typ:           TypeSection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSectionID sets the id field of the mutation.
func withSectionID(id int) sectionOption {
	return func(m *SectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Section
		)
		m.oldValue = func(ctx context.Context) (*Section, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Section.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSection sets the old Section of the mutation.
func withSection(node *Section) sectionOption {
	return func(m *SectionMutation) {
		m.oldValue = func(context.Context) (*Section, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGroup sets the Group field.
func (m *SectionMutation) SetGroup(i int) {
	m._Group = &i
	m.add_Group = nil
}

// Group returns the Group value in the mutation.
func (m *SectionMutation) Group() (r int, exists bool) {
	v := m._Group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroup returns the old Group value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldGroup(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGroup is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroup: %w", err)
	}
	return oldValue.Group, nil
}

// AddGroup adds i to Group.
func (m *SectionMutation) AddGroup(i int) {
	if m.add_Group != nil {
		*m.add_Group += i
	} else {
		m.add_Group = &i
	}
}

// AddedGroup returns the value that was added to the Group field in this mutation.
func (m *SectionMutation) AddedGroup() (r int, exists bool) {
	v := m.add_Group
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroup reset all changes of the "Group" field.
func (m *SectionMutation) ResetGroup() {
	m._Group = nil
	m.add_Group = nil
}

// SetRecieve sets the recieve field.
func (m *SectionMutation) SetRecieve(i int) {
	m.recieve = &i
	m.addrecieve = nil
}

// Recieve returns the recieve value in the mutation.
func (m *SectionMutation) Recieve() (r int, exists bool) {
	v := m.recieve
	if v == nil {
		return
	}
	return *v, true
}

// OldRecieve returns the old recieve value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldRecieve(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRecieve is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRecieve requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecieve: %w", err)
	}
	return oldValue.Recieve, nil
}

// AddRecieve adds i to recieve.
func (m *SectionMutation) AddRecieve(i int) {
	if m.addrecieve != nil {
		*m.addrecieve += i
	} else {
		m.addrecieve = &i
	}
}

// AddedRecieve returns the value that was added to the recieve field in this mutation.
func (m *SectionMutation) AddedRecieve() (r int, exists bool) {
	v := m.addrecieve
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecieve reset all changes of the "recieve" field.
func (m *SectionMutation) ResetRecieve() {
	m.recieve = nil
	m.addrecieve = nil
}

// SetSeatLeft sets the Seat_left field.
func (m *SectionMutation) SetSeatLeft(i int) {
	m._Seat_left = &i
	m.add_Seat_left = nil
}

// SeatLeft returns the Seat_left value in the mutation.
func (m *SectionMutation) SeatLeft() (r int, exists bool) {
	v := m._Seat_left
	if v == nil {
		return
	}
	return *v, true
}

// OldSeatLeft returns the old Seat_left value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldSeatLeft(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeatLeft is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeatLeft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeatLeft: %w", err)
	}
	return oldValue.SeatLeft, nil
}

// AddSeatLeft adds i to Seat_left.
func (m *SectionMutation) AddSeatLeft(i int) {
	if m.add_Seat_left != nil {
		*m.add_Seat_left += i
	} else {
		m.add_Seat_left = &i
	}
}

// AddedSeatLeft returns the value that was added to the Seat_left field in this mutation.
func (m *SectionMutation) AddedSeatLeft() (r int, exists bool) {
	v := m.add_Seat_left
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeatLeft reset all changes of the "Seat_left" field.
func (m *SectionMutation) ResetSeatLeft() {
	m._Seat_left = nil
	m.add_Seat_left = nil
}

// SetRoom sets the Room field.
func (m *SectionMutation) SetRoom(s string) {
	m._Room = &s
}

// Room returns the Room value in the mutation.
func (m *SectionMutation) Room() (r string, exists bool) {
	v := m._Room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoom returns the old Room value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldRoom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoom is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoom: %w", err)
	}
	return oldValue.Room, nil
}

// ResetRoom reset all changes of the "Room" field.
func (m *SectionMutation) ResetRoom() {
	m._Room = nil
}

// SetDateTime sets the Date_Time field.
func (m *SectionMutation) SetDateTime(s string) {
	m._Date_Time = &s
}

// DateTime returns the Date_Time value in the mutation.
func (m *SectionMutation) DateTime() (r string, exists bool) {
	v := m._Date_Time
	if v == nil {
		return
	}
	return *v, true
}

// OldDateTime returns the old Date_Time value of the Section.
// If the Section object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SectionMutation) OldDateTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateTime: %w", err)
	}
	return oldValue.DateTime, nil
}

// ResetDateTime reset all changes of the "Date_Time" field.
func (m *SectionMutation) ResetDateTime() {
	m._Date_Time = nil
}

// AddSecIDIDs adds the sec_id edge to Lessonplan by ids.
func (m *SectionMutation) AddSecIDIDs(ids ...int) {
	if m.sec_id == nil {
		m.sec_id = make(map[int]struct{})
	}
	for i := range ids {
		m.sec_id[ids[i]] = struct{}{}
	}
}

// RemoveSecIDIDs removes the sec_id edge to Lessonplan by ids.
func (m *SectionMutation) RemoveSecIDIDs(ids ...int) {
	if m.removedsec_id == nil {
		m.removedsec_id = make(map[int]struct{})
	}
	for i := range ids {
		m.removedsec_id[ids[i]] = struct{}{}
	}
}

// RemovedSecID returns the removed ids of sec_id.
func (m *SectionMutation) RemovedSecIDIDs() (ids []int) {
	for id := range m.removedsec_id {
		ids = append(ids, id)
	}
	return
}

// SecIDIDs returns the sec_id ids in the mutation.
func (m *SectionMutation) SecIDIDs() (ids []int) {
	for id := range m.sec_id {
		ids = append(ids, id)
	}
	return
}

// ResetSecID reset all changes of the "sec_id" edge.
func (m *SectionMutation) ResetSecID() {
	m.sec_id = nil
	m.removedsec_id = nil
}

// Op returns the operation name.
func (m *SectionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Section).
func (m *SectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SectionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Group != nil {
		fields = append(fields, section.FieldGroup)
	}
	if m.recieve != nil {
		fields = append(fields, section.FieldRecieve)
	}
	if m._Seat_left != nil {
		fields = append(fields, section.FieldSeatLeft)
	}
	if m._Room != nil {
		fields = append(fields, section.FieldRoom)
	}
	if m._Date_Time != nil {
		fields = append(fields, section.FieldDateTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case section.FieldGroup:
		return m.Group()
	case section.FieldRecieve:
		return m.Recieve()
	case section.FieldSeatLeft:
		return m.SeatLeft()
	case section.FieldRoom:
		return m.Room()
	case section.FieldDateTime:
		return m.DateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case section.FieldGroup:
		return m.OldGroup(ctx)
	case section.FieldRecieve:
		return m.OldRecieve(ctx)
	case section.FieldSeatLeft:
		return m.OldSeatLeft(ctx)
	case section.FieldRoom:
		return m.OldRoom(ctx)
	case section.FieldDateTime:
		return m.OldDateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Section field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case section.FieldGroup:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroup(v)
		return nil
	case section.FieldRecieve:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecieve(v)
		return nil
	case section.FieldSeatLeft:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeatLeft(v)
		return nil
	case section.FieldRoom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoom(v)
		return nil
	case section.FieldDateTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SectionMutation) AddedFields() []string {
	var fields []string
	if m.add_Group != nil {
		fields = append(fields, section.FieldGroup)
	}
	if m.addrecieve != nil {
		fields = append(fields, section.FieldRecieve)
	}
	if m.add_Seat_left != nil {
		fields = append(fields, section.FieldSeatLeft)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case section.FieldGroup:
		return m.AddedGroup()
	case section.FieldRecieve:
		return m.AddedRecieve()
	case section.FieldSeatLeft:
		return m.AddedSeatLeft()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case section.FieldGroup:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroup(v)
		return nil
	case section.FieldRecieve:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecieve(v)
		return nil
	case section.FieldSeatLeft:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeatLeft(v)
		return nil
	}
	return fmt.Errorf("unknown Section numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Section nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SectionMutation) ResetField(name string) error {
	switch name {
	case section.FieldGroup:
		m.ResetGroup()
		return nil
	case section.FieldRecieve:
		m.ResetRecieve()
		return nil
	case section.FieldSeatLeft:
		m.ResetSeatLeft()
		return nil
	case section.FieldRoom:
		m.ResetRoom()
		return nil
	case section.FieldDateTime:
		m.ResetDateTime()
		return nil
	}
	return fmt.Errorf("unknown Section field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sec_id != nil {
		edges = append(edges, section.EdgeSecID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case section.EdgeSecID:
		ids := make([]ent.Value, 0, len(m.sec_id))
		for id := range m.sec_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsec_id != nil {
		edges = append(edges, section.EdgeSecID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case section.EdgeSecID:
		ids := make([]ent.Value, 0, len(m.removedsec_id))
		for id := range m.removedsec_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SectionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Section unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SectionMutation) ResetEdge(name string) error {
	switch name {
	case section.EdgeSecID:
		m.ResetSecID()
		return nil
	}
	return fmt.Errorf("unknown Section edge %s", name)
}

// SubjectMutation represents an operation that mutate the Subjects
// nodes in the graph.
type SubjectMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_Subject_Name        *string
	_Credit              *int
	add_Credit           *int
	_Price               *float64
	add_Price            *float64
	clearedFields        map[string]struct{}
	_Professor_ID        *int
	cleared_Professor_ID bool
	_Subject_ID          map[int]struct{}
	removed_Subject_ID   map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*Subject, error)
}

var _ ent.Mutation = (*SubjectMutation)(nil)

// subjectOption allows to manage the mutation configuration using functional options.
type subjectOption func(*SubjectMutation)

// newSubjectMutation creates new mutation for $n.Name.
func newSubjectMutation(c config, op Op, opts ...subjectOption) *SubjectMutation {
	m := &SubjectMutation{
		config:        c,
		op:            op,
		typ:           TypeSubject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubjectID sets the id field of the mutation.
func withSubjectID(id int) subjectOption {
	return func(m *SubjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Subject
		)
		m.oldValue = func(ctx context.Context) (*Subject, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubject sets the old Subject of the mutation.
func withSubject(node *Subject) subjectOption {
	return func(m *SubjectMutation) {
		m.oldValue = func(context.Context) (*Subject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SubjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSubjectName sets the Subject_Name field.
func (m *SubjectMutation) SetSubjectName(s string) {
	m._Subject_Name = &s
}

// SubjectName returns the Subject_Name value in the mutation.
func (m *SubjectMutation) SubjectName() (r string, exists bool) {
	v := m._Subject_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldSubjectName returns the old Subject_Name value of the Subject.
// If the Subject object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SubjectMutation) OldSubjectName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSubjectName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSubjectName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubjectName: %w", err)
	}
	return oldValue.SubjectName, nil
}

// ResetSubjectName reset all changes of the "Subject_Name" field.
func (m *SubjectMutation) ResetSubjectName() {
	m._Subject_Name = nil
}

// SetCredit sets the Credit field.
func (m *SubjectMutation) SetCredit(i int) {
	m._Credit = &i
	m.add_Credit = nil
}

// Credit returns the Credit value in the mutation.
func (m *SubjectMutation) Credit() (r int, exists bool) {
	v := m._Credit
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit returns the old Credit value of the Subject.
// If the Subject object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SubjectMutation) OldCredit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCredit is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCredit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit: %w", err)
	}
	return oldValue.Credit, nil
}

// AddCredit adds i to Credit.
func (m *SubjectMutation) AddCredit(i int) {
	if m.add_Credit != nil {
		*m.add_Credit += i
	} else {
		m.add_Credit = &i
	}
}

// AddedCredit returns the value that was added to the Credit field in this mutation.
func (m *SubjectMutation) AddedCredit() (r int, exists bool) {
	v := m.add_Credit
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit reset all changes of the "Credit" field.
func (m *SubjectMutation) ResetCredit() {
	m._Credit = nil
	m.add_Credit = nil
}

// SetPrice sets the Price field.
func (m *SubjectMutation) SetPrice(f float64) {
	m._Price = &f
	m.add_Price = nil
}

// Price returns the Price value in the mutation.
func (m *SubjectMutation) Price() (r float64, exists bool) {
	v := m._Price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old Price value of the Subject.
// If the Subject object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SubjectMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to Price.
func (m *SubjectMutation) AddPrice(f float64) {
	if m.add_Price != nil {
		*m.add_Price += f
	} else {
		m.add_Price = &f
	}
}

// AddedPrice returns the value that was added to the Price field in this mutation.
func (m *SubjectMutation) AddedPrice() (r float64, exists bool) {
	v := m.add_Price
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice reset all changes of the "Price" field.
func (m *SubjectMutation) ResetPrice() {
	m._Price = nil
	m.add_Price = nil
}

// SetProfessorIDID sets the Professor_ID edge to Teacher by id.
func (m *SubjectMutation) SetProfessorIDID(id int) {
	m._Professor_ID = &id
}

// ClearProfessorID clears the Professor_ID edge to Teacher.
func (m *SubjectMutation) ClearProfessorID() {
	m.cleared_Professor_ID = true
}

// ProfessorIDCleared returns if the edge Professor_ID was cleared.
func (m *SubjectMutation) ProfessorIDCleared() bool {
	return m.cleared_Professor_ID
}

// ProfessorIDID returns the Professor_ID id in the mutation.
func (m *SubjectMutation) ProfessorIDID() (id int, exists bool) {
	if m._Professor_ID != nil {
		return *m._Professor_ID, true
	}
	return
}

// ProfessorIDIDs returns the Professor_ID ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProfessorIDID instead. It exists only for internal usage by the builders.
func (m *SubjectMutation) ProfessorIDIDs() (ids []int) {
	if id := m._Professor_ID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfessorID reset all changes of the "Professor_ID" edge.
func (m *SubjectMutation) ResetProfessorID() {
	m._Professor_ID = nil
	m.cleared_Professor_ID = false
}

// AddSubjectIDIDs adds the Subject_ID edge to Lessonplan by ids.
func (m *SubjectMutation) AddSubjectIDIDs(ids ...int) {
	if m._Subject_ID == nil {
		m._Subject_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._Subject_ID[ids[i]] = struct{}{}
	}
}

// RemoveSubjectIDIDs removes the Subject_ID edge to Lessonplan by ids.
func (m *SubjectMutation) RemoveSubjectIDIDs(ids ...int) {
	if m.removed_Subject_ID == nil {
		m.removed_Subject_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Subject_ID[ids[i]] = struct{}{}
	}
}

// RemovedSubjectID returns the removed ids of Subject_ID.
func (m *SubjectMutation) RemovedSubjectIDIDs() (ids []int) {
	for id := range m.removed_Subject_ID {
		ids = append(ids, id)
	}
	return
}

// SubjectIDIDs returns the Subject_ID ids in the mutation.
func (m *SubjectMutation) SubjectIDIDs() (ids []int) {
	for id := range m._Subject_ID {
		ids = append(ids, id)
	}
	return
}

// ResetSubjectID reset all changes of the "Subject_ID" edge.
func (m *SubjectMutation) ResetSubjectID() {
	m._Subject_ID = nil
	m.removed_Subject_ID = nil
}

// Op returns the operation name.
func (m *SubjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Subject).
func (m *SubjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SubjectMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Subject_Name != nil {
		fields = append(fields, subject.FieldSubjectName)
	}
	if m._Credit != nil {
		fields = append(fields, subject.FieldCredit)
	}
	if m._Price != nil {
		fields = append(fields, subject.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SubjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subject.FieldSubjectName:
		return m.SubjectName()
	case subject.FieldCredit:
		return m.Credit()
	case subject.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SubjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subject.FieldSubjectName:
		return m.OldSubjectName(ctx)
	case subject.FieldCredit:
		return m.OldCredit(ctx)
	case subject.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown Subject field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SubjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subject.FieldSubjectName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubjectName(v)
		return nil
	case subject.FieldCredit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit(v)
		return nil
	case subject.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Subject field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SubjectMutation) AddedFields() []string {
	var fields []string
	if m.add_Credit != nil {
		fields = append(fields, subject.FieldCredit)
	}
	if m.add_Price != nil {
		fields = append(fields, subject.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SubjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subject.FieldCredit:
		return m.AddedCredit()
	case subject.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SubjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subject.FieldCredit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit(v)
		return nil
	case subject.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Subject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SubjectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SubjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubjectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subject nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SubjectMutation) ResetField(name string) error {
	switch name {
	case subject.FieldSubjectName:
		m.ResetSubjectName()
		return nil
	case subject.FieldCredit:
		m.ResetCredit()
		return nil
	case subject.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown Subject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SubjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Professor_ID != nil {
		edges = append(edges, subject.EdgeProfessorID)
	}
	if m._Subject_ID != nil {
		edges = append(edges, subject.EdgeSubjectID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SubjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subject.EdgeProfessorID:
		if id := m._Professor_ID; id != nil {
			return []ent.Value{*id}
		}
	case subject.EdgeSubjectID:
		ids := make([]ent.Value, 0, len(m._Subject_ID))
		for id := range m._Subject_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SubjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_Subject_ID != nil {
		edges = append(edges, subject.EdgeSubjectID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SubjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subject.EdgeSubjectID:
		ids := make([]ent.Value, 0, len(m.removed_Subject_ID))
		for id := range m.removed_Subject_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SubjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_Professor_ID {
		edges = append(edges, subject.EdgeProfessorID)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SubjectMutation) EdgeCleared(name string) bool {
	switch name {
	case subject.EdgeProfessorID:
		return m.cleared_Professor_ID
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SubjectMutation) ClearEdge(name string) error {
	switch name {
	case subject.EdgeProfessorID:
		m.ClearProfessorID()
		return nil
	}
	return fmt.Errorf("unknown Subject unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SubjectMutation) ResetEdge(name string) error {
	switch name {
	case subject.EdgeProfessorID:
		m.ResetProfessorID()
		return nil
	case subject.EdgeSubjectID:
		m.ResetSubjectID()
		return nil
	}
	return fmt.Errorf("unknown Subject edge %s", name)
}

// TeacherMutation represents an operation that mutate the Teachers
// nodes in the graph.
type TeacherMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Teacher_Name       *string
	clearedFields       map[string]struct{}
	_Teacher_ID         map[int]struct{}
	removed_Teacher_ID  map[int]struct{}
	_Teachers_ID        map[int]struct{}
	removed_Teachers_ID map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Teacher, error)
}

var _ ent.Mutation = (*TeacherMutation)(nil)

// teacherOption allows to manage the mutation configuration using functional options.
type teacherOption func(*TeacherMutation)

// newTeacherMutation creates new mutation for $n.Name.
func newTeacherMutation(c config, op Op, opts ...teacherOption) *TeacherMutation {
	m := &TeacherMutation{
		config:        c,
		op:            op,
		typ:           TypeTeacher,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeacherID sets the id field of the mutation.
func withTeacherID(id int) teacherOption {
	return func(m *TeacherMutation) {
		var (
			err   error
			once  sync.Once
			value *Teacher
		)
		m.oldValue = func(ctx context.Context) (*Teacher, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Teacher.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeacher sets the old Teacher of the mutation.
func withTeacher(node *Teacher) teacherOption {
	return func(m *TeacherMutation) {
		m.oldValue = func(context.Context) (*Teacher, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeacherMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeacherMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TeacherMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTeacherName sets the Teacher_Name field.
func (m *TeacherMutation) SetTeacherName(s string) {
	m._Teacher_Name = &s
}

// TeacherName returns the Teacher_Name value in the mutation.
func (m *TeacherMutation) TeacherName() (r string, exists bool) {
	v := m._Teacher_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldTeacherName returns the old Teacher_Name value of the Teacher.
// If the Teacher object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TeacherMutation) OldTeacherName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTeacherName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTeacherName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeacherName: %w", err)
	}
	return oldValue.TeacherName, nil
}

// ResetTeacherName reset all changes of the "Teacher_Name" field.
func (m *TeacherMutation) ResetTeacherName() {
	m._Teacher_Name = nil
}

// AddTeacherIDIDs adds the Teacher_ID edge to Subject by ids.
func (m *TeacherMutation) AddTeacherIDIDs(ids ...int) {
	if m._Teacher_ID == nil {
		m._Teacher_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._Teacher_ID[ids[i]] = struct{}{}
	}
}

// RemoveTeacherIDIDs removes the Teacher_ID edge to Subject by ids.
func (m *TeacherMutation) RemoveTeacherIDIDs(ids ...int) {
	if m.removed_Teacher_ID == nil {
		m.removed_Teacher_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Teacher_ID[ids[i]] = struct{}{}
	}
}

// RemovedTeacherID returns the removed ids of Teacher_ID.
func (m *TeacherMutation) RemovedTeacherIDIDs() (ids []int) {
	for id := range m.removed_Teacher_ID {
		ids = append(ids, id)
	}
	return
}

// TeacherIDIDs returns the Teacher_ID ids in the mutation.
func (m *TeacherMutation) TeacherIDIDs() (ids []int) {
	for id := range m._Teacher_ID {
		ids = append(ids, id)
	}
	return
}

// ResetTeacherID reset all changes of the "Teacher_ID" edge.
func (m *TeacherMutation) ResetTeacherID() {
	m._Teacher_ID = nil
	m.removed_Teacher_ID = nil
}

// AddTeachersIDIDs adds the Teachers_ID edge to Lessonplan by ids.
func (m *TeacherMutation) AddTeachersIDIDs(ids ...int) {
	if m._Teachers_ID == nil {
		m._Teachers_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._Teachers_ID[ids[i]] = struct{}{}
	}
}

// RemoveTeachersIDIDs removes the Teachers_ID edge to Lessonplan by ids.
func (m *TeacherMutation) RemoveTeachersIDIDs(ids ...int) {
	if m.removed_Teachers_ID == nil {
		m.removed_Teachers_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Teachers_ID[ids[i]] = struct{}{}
	}
}

// RemovedTeachersID returns the removed ids of Teachers_ID.
func (m *TeacherMutation) RemovedTeachersIDIDs() (ids []int) {
	for id := range m.removed_Teachers_ID {
		ids = append(ids, id)
	}
	return
}

// TeachersIDIDs returns the Teachers_ID ids in the mutation.
func (m *TeacherMutation) TeachersIDIDs() (ids []int) {
	for id := range m._Teachers_ID {
		ids = append(ids, id)
	}
	return
}

// ResetTeachersID reset all changes of the "Teachers_ID" edge.
func (m *TeacherMutation) ResetTeachersID() {
	m._Teachers_ID = nil
	m.removed_Teachers_ID = nil
}

// Op returns the operation name.
func (m *TeacherMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Teacher).
func (m *TeacherMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TeacherMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Teacher_Name != nil {
		fields = append(fields, teacher.FieldTeacherName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TeacherMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case teacher.FieldTeacherName:
		return m.TeacherName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TeacherMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case teacher.FieldTeacherName:
		return m.OldTeacherName(ctx)
	}
	return nil, fmt.Errorf("unknown Teacher field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TeacherMutation) SetField(name string, value ent.Value) error {
	switch name {
	case teacher.FieldTeacherName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeacherName(v)
		return nil
	}
	return fmt.Errorf("unknown Teacher field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TeacherMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TeacherMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TeacherMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Teacher numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TeacherMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TeacherMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeacherMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Teacher nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TeacherMutation) ResetField(name string) error {
	switch name {
	case teacher.FieldTeacherName:
		m.ResetTeacherName()
		return nil
	}
	return fmt.Errorf("unknown Teacher field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TeacherMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Teacher_ID != nil {
		edges = append(edges, teacher.EdgeTeacherID)
	}
	if m._Teachers_ID != nil {
		edges = append(edges, teacher.EdgeTeachersID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TeacherMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case teacher.EdgeTeacherID:
		ids := make([]ent.Value, 0, len(m._Teacher_ID))
		for id := range m._Teacher_ID {
			ids = append(ids, id)
		}
		return ids
	case teacher.EdgeTeachersID:
		ids := make([]ent.Value, 0, len(m._Teachers_ID))
		for id := range m._Teachers_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TeacherMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_Teacher_ID != nil {
		edges = append(edges, teacher.EdgeTeacherID)
	}
	if m.removed_Teachers_ID != nil {
		edges = append(edges, teacher.EdgeTeachersID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TeacherMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case teacher.EdgeTeacherID:
		ids := make([]ent.Value, 0, len(m.removed_Teacher_ID))
		for id := range m.removed_Teacher_ID {
			ids = append(ids, id)
		}
		return ids
	case teacher.EdgeTeachersID:
		ids := make([]ent.Value, 0, len(m.removed_Teachers_ID))
		for id := range m.removed_Teachers_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TeacherMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TeacherMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TeacherMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Teacher unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TeacherMutation) ResetEdge(name string) error {
	switch name {
	case teacher.EdgeTeacherID:
		m.ResetTeacherID()
		return nil
	case teacher.EdgeTeachersID:
		m.ResetTeachersID()
		return nil
	}
	return fmt.Errorf("unknown Teacher edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_User_Email     *string
	_Password       *string
	clearedFields   map[string]struct{}
	_User_ID        map[int]struct{}
	removed_User_ID map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserEmail sets the User_Email field.
func (m *UserMutation) SetUserEmail(s string) {
	m._User_Email = &s
}

// UserEmail returns the User_Email value in the mutation.
func (m *UserMutation) UserEmail() (r string, exists bool) {
	v := m._User_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldUserEmail returns the old User_Email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserEmail: %w", err)
	}
	return oldValue.UserEmail, nil
}

// ResetUserEmail reset all changes of the "User_Email" field.
func (m *UserMutation) ResetUserEmail() {
	m._User_Email = nil
}

// SetPassword sets the Password field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// AddUserIDIDs adds the User_ID edge to Teacher by ids.
func (m *UserMutation) AddUserIDIDs(ids ...int) {
	if m._User_ID == nil {
		m._User_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._User_ID[ids[i]] = struct{}{}
	}
}

// RemoveUserIDIDs removes the User_ID edge to Teacher by ids.
func (m *UserMutation) RemoveUserIDIDs(ids ...int) {
	if m.removed_User_ID == nil {
		m.removed_User_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_User_ID[ids[i]] = struct{}{}
	}
}

// RemovedUserID returns the removed ids of User_ID.
func (m *UserMutation) RemovedUserIDIDs() (ids []int) {
	for id := range m.removed_User_ID {
		ids = append(ids, id)
	}
	return
}

// UserIDIDs returns the User_ID ids in the mutation.
func (m *UserMutation) UserIDIDs() (ids []int) {
	for id := range m._User_ID {
		ids = append(ids, id)
	}
	return
}

// ResetUserID reset all changes of the "User_ID" edge.
func (m *UserMutation) ResetUserID() {
	m._User_ID = nil
	m.removed_User_ID = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._User_Email != nil {
		fields = append(fields, user.FieldUserEmail)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserEmail:
		return m.UserEmail()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserEmail:
		return m.OldUserEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserEmail:
		m.ResetUserEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._User_ID != nil {
		edges = append(edges, user.EdgeUserID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserID:
		ids := make([]ent.Value, 0, len(m._User_ID))
		for id := range m._User_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_User_ID != nil {
		edges = append(edges, user.EdgeUserID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserID:
		ids := make([]ent.Value, 0, len(m.removed_User_ID))
		for id := range m.removed_User_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
