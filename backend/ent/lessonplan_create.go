// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/USER/app/ent/lessonplan"
	"github.com/USER/app/ent/section"
	"github.com/USER/app/ent/subject"
	"github.com/USER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// LessonplanCreate is the builder for creating a Lessonplan entity.
type LessonplanCreate struct {
	config
	mutation *LessonplanMutation
	hooks    []Hook
}

// SetRoom sets the Room field.
func (lc *LessonplanCreate) SetRoom(s string) *LessonplanCreate {
	lc.mutation.SetRoom(s)
	return lc
}

// SetGroupIDID sets the Group_id edge to Section by id.
func (lc *LessonplanCreate) SetGroupIDID(id int) *LessonplanCreate {
	lc.mutation.SetGroupIDID(id)
	return lc
}

// SetNillableGroupIDID sets the Group_id edge to Section by id if the given value is not nil.
func (lc *LessonplanCreate) SetNillableGroupIDID(id *int) *LessonplanCreate {
	if id != nil {
		lc = lc.SetGroupIDID(*id)
	}
	return lc
}

// SetGroupID sets the Group_id edge to Section.
func (lc *LessonplanCreate) SetGroupID(s *Section) *LessonplanCreate {
	return lc.SetGroupIDID(s.ID)
}

// SetCourseIDID sets the Course_ID edge to Subject by id.
func (lc *LessonplanCreate) SetCourseIDID(id int) *LessonplanCreate {
	lc.mutation.SetCourseIDID(id)
	return lc
}

// SetNillableCourseIDID sets the Course_ID edge to Subject by id if the given value is not nil.
func (lc *LessonplanCreate) SetNillableCourseIDID(id *int) *LessonplanCreate {
	if id != nil {
		lc = lc.SetCourseIDID(*id)
	}
	return lc
}

// SetCourseID sets the Course_ID edge to Subject.
func (lc *LessonplanCreate) SetCourseID(s *Subject) *LessonplanCreate {
	return lc.SetCourseIDID(s.ID)
}

// SetProfessorIDID sets the Professor_ID edge to Teacher by id.
func (lc *LessonplanCreate) SetProfessorIDID(id int) *LessonplanCreate {
	lc.mutation.SetProfessorIDID(id)
	return lc
}

// SetNillableProfessorIDID sets the Professor_ID edge to Teacher by id if the given value is not nil.
func (lc *LessonplanCreate) SetNillableProfessorIDID(id *int) *LessonplanCreate {
	if id != nil {
		lc = lc.SetProfessorIDID(*id)
	}
	return lc
}

// SetProfessorID sets the Professor_ID edge to Teacher.
func (lc *LessonplanCreate) SetProfessorID(t *Teacher) *LessonplanCreate {
	return lc.SetProfessorIDID(t.ID)
}

// Mutation returns the LessonplanMutation object of the builder.
func (lc *LessonplanCreate) Mutation() *LessonplanMutation {
	return lc.mutation
}

// Save creates the Lessonplan in the database.
func (lc *LessonplanCreate) Save(ctx context.Context) (*Lessonplan, error) {
	if _, ok := lc.mutation.Room(); !ok {
		return nil, &ValidationError{Name: "Room", err: errors.New("ent: missing required field \"Room\"")}
	}
	if v, ok := lc.mutation.Room(); ok {
		if err := lessonplan.RoomValidator(v); err != nil {
			return nil, &ValidationError{Name: "Room", err: fmt.Errorf("ent: validator failed for field \"Room\": %w", err)}
		}
	}
	var (
		err  error
		node *Lessonplan
	)
	if len(lc.hooks) == 0 {
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LessonplanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LessonplanCreate) SaveX(ctx context.Context) *Lessonplan {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lc *LessonplanCreate) sqlSave(ctx context.Context) (*Lessonplan, error) {
	l, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	l.ID = int(id)
	return l, nil
}

func (lc *LessonplanCreate) createSpec() (*Lessonplan, *sqlgraph.CreateSpec) {
	var (
		l     = &Lessonplan{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lessonplan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lessonplan.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.Room(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lessonplan.FieldRoom,
		})
		l.Room = value
	}
	if nodes := lc.mutation.GroupIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonplan.GroupIDTable,
			Columns: []string{lessonplan.GroupIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: section.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.CourseIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonplan.CourseIDTable,
			Columns: []string{lessonplan.CourseIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ProfessorIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lessonplan.ProfessorIDTable,
			Columns: []string{lessonplan.ProfessorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: teacher.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return l, _spec
}
