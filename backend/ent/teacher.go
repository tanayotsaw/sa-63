// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/USER/app/ent/teacher"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Teacher is the model entity for the Teacher schema.
type Teacher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TeacherName holds the value of the "Teacher_Name" field.
	TeacherName string `json:"Teacher_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeacherQuery when eager-loading is set.
	Edges        TeacherEdges `json:"edges"`
	user_user_id *int
}

// TeacherEdges holds the relations/edges for other nodes in the graph.
type TeacherEdges struct {
	// TeacherID holds the value of the Teacher_ID edge.
	TeacherID []*Subject
	// TeachersID holds the value of the Teachers_ID edge.
	TeachersID []*Lessonplan
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeacherIDOrErr returns the TeacherID value or an error if the edge
// was not loaded in eager-loading.
func (e TeacherEdges) TeacherIDOrErr() ([]*Subject, error) {
	if e.loadedTypes[0] {
		return e.TeacherID, nil
	}
	return nil, &NotLoadedError{edge: "Teacher_ID"}
}

// TeachersIDOrErr returns the TeachersID value or an error if the edge
// was not loaded in eager-loading.
func (e TeacherEdges) TeachersIDOrErr() ([]*Lessonplan, error) {
	if e.loadedTypes[1] {
		return e.TeachersID, nil
	}
	return nil, &NotLoadedError{edge: "Teachers_ID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Teacher) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Teacher_Name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Teacher) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Teacher fields.
func (t *Teacher) assignValues(values ...interface{}) error {
	if m, n := len(values), len(teacher.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Teacher_Name", values[0])
	} else if value.Valid {
		t.TeacherName = value.String
	}
	values = values[1:]
	if len(values) == len(teacher.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_user_id", value)
		} else if value.Valid {
			t.user_user_id = new(int)
			*t.user_user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryTeacherID queries the Teacher_ID edge of the Teacher.
func (t *Teacher) QueryTeacherID() *SubjectQuery {
	return (&TeacherClient{config: t.config}).QueryTeacherID(t)
}

// QueryTeachersID queries the Teachers_ID edge of the Teacher.
func (t *Teacher) QueryTeachersID() *LessonplanQuery {
	return (&TeacherClient{config: t.config}).QueryTeachersID(t)
}

// Update returns a builder for updating this Teacher.
// Note that, you need to call Teacher.Unwrap() before calling this method, if this Teacher
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Teacher) Update() *TeacherUpdateOne {
	return (&TeacherClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Teacher) Unwrap() *Teacher {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Teacher is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Teacher) String() string {
	var builder strings.Builder
	builder.WriteString("Teacher(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Teacher_Name=")
	builder.WriteString(t.TeacherName)
	builder.WriteByte(')')
	return builder.String()
}

// Teachers is a parsable slice of Teacher.
type Teachers []*Teacher

func (t Teachers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
